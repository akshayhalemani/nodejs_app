---
- name: Deploy application to prod env
  hosts: app_servers
  serial: 1
  become: yes
  vars:
    app_name: nodejs_app
    ecr_repo: 123456789012.dkr.ecr.us-east-1.amazonaws.com/nodejs_app
    app_version: "{{ v }}"

  tasks:
    - name: Get ECR login
      shell: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com

    - name: Check if current container is running
      shell: docker-compose ps
      ignore_errors: yes

    - name: Stop current container if running
      shell: docker-compose down
      ignore_errors: no

    - name: Take backup docker-compose.yml file
      copy:
        src: /home/ec2-user/app/docker-compose.yml
        dest: /home/ec2-user/app/docker-compose.yml-bkp
      ignore_errors: no

    - name: update the docker image in docker compose file 
      shell: sed -i s/{{ ecr_repo }}:*/{{ ecr_repo }}:{{ app_version }}
      ignore_errors: no

    - name: Start new container
      shell: docker-compose up

    - name: Wait for 10 seconds to allow app to initialize
      pause:
        seconds: 10

    - name: Health check on new container
      uri:
        url: http://localhost:3000/
        status_code: 200
      register: health_check
      ignore_errors: yes

    - name: Rollback if health check failed
      block:
        - name: Stop new container
          shell: docker-compose down

        - name: Remove docker-compose.yml file
          shell: rm -rf /home/ec2-user/app/docker-compose.yml
        
        - name: Take backup docker-compose.yml file
          copy:
            src: /home/ec2-user/app/docker-compose.yml-bkp
            dest: /home/ec2-user/app/docker-compose.yml

        - name: Start old container
          shell: docker-compose up
      when: health_check.failed

    - name: Remove old container if health check succeeded
      shell: rm -rf /home/ec2-user/app/docker-compose.yml
      when: not health_check.failed
